import { NewFeedbackType, FeedbackType } from "../types/feedback.types";
import { fetchWrapper } from "../utils/helpers";

const API_URL: string = "http://localhost:9000"; //mock API generated by JSON server from data/data.json file

interface editedFeedbackType {
  title: string;
  description: string;
  category: string;
  status: string;
}
/* TO DO: Add type annotations and move function to utils folder */
function getRoadmapStats(roadmapData) {
  const roadmapStats = {};

  for (const status in roadmapData) {
    roadmapStats[status] = roadmapData[status].length;
  }

  return roadmapStats;
}

/* Fetch feedback list */
export async function fetchFeedbackList(
  pageContext: "feedbackBoard" | "developmentRoadmap" = "feedbackBoard"
) {
  const data = await fetchWrapper(`${API_URL}/productRequests`);

  const feedbackEntriesDev = data.reduce(
    (acc: { [x: string]: FeedbackType[] }, curr: FeedbackType) => {
      const status = curr.status;

      if (!acc[status]) {
        acc[status] = [];
      }

      acc[status].push(curr);
      return acc;
    },
    {}
  );

  const { suggestion, ...roadmapStages } = feedbackEntriesDev;

  if (pageContext === "developmentRoadmap") return roadmapStages;

  /* Data for Feedback Board Page */
  const roadmapStats = getRoadmapStats(roadmapStages);

  const feedbackBoardData = { suggestionList: suggestion, roadmapStats };

  /* model: {suggestion: 4, planned: 3, in-progress: 3, live: 2} */
  console.log("Feedback Board data", feedbackBoardData);

  return data;
}

/* Fetch feedback by id */
export async function fetchFeedbackById(feedbackId: string) {
  return fetchWrapper(`${API_URL}/productRequests/${feedbackId}`);
}

/* Submit new feedback */
export async function submitFeedback(feedback: NewFeedbackType) {
  return fetchWrapper(`${API_URL}/productRequests`, {
    method: "POST",
    body: JSON.stringify(feedback),
    headers: {
      "Content-Type": "application/json",
    },
  });
}

/* Edit feedback entry */
export async function editFeedback(
  feedbackId: string,
  editedFeedback: editedFeedbackType
) {
  return fetchWrapper(`${API_URL}/productRequests/${feedbackId}`, {
    method: "PATCH",
    body: JSON.stringify(editedFeedback),
    headers: {
      "Content-Type": "application/json",
    },
  });
}

/* Delete feedback entry */
export async function deleteFeedback(feedbackId: string) {
  return fetchWrapper(`${API_URL}/productRequests/${feedbackId}`, {
    method: "DELETE",
  });
}

/* Update backend with current vote count after user's upvote/unvote actions */
export async function persistFeedbackVote(
  feedbackId: string,
  voteCount: number
) {
  return fetchWrapper(`${API_URL}/productRequests/${feedbackId}`, {
    method: "PATCH",
    body: JSON.stringify({ upvotes: voteCount }),
    headers: {
      "Content-Type": "application/json",
    },
  });
}

/* Fetch user list */
export async function fetchUserList() {
  return fetchWrapper(`${API_URL}/userList`);
}

/* Update commentCount when a new comment/reply is added - currently working only incrementing commentCount
   TO DO: use the same function to decrement commentCount when a comment/reply is deleted
*/
export async function updateCommentCount(
  feedbackId: string,
  updatedCommentCount: number
) {
  return fetchWrapper(`${API_URL}/productRequests/${feedbackId}`, {
    method: "PATCH",
    body: JSON.stringify({ commentCount: updatedCommentCount }),
    headers: {
      "Content-Type": "application/json",
    },
  });
}
